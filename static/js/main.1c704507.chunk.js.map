{"version":3,"sources":["assets/weather.gif","constants/Credentials.js","services/WeatherDataByCityCountryService.js","UI/Autocomplete/Form/Form.js","components/SimpleCard/SimpleCard.js","components/Header/Header.js","containers/App/App.js","UI/Autocomplete/Autocomplete.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","APP_ID","WeatherDataByCityCountryService","_x","_WeatherDataByCityCountryService","apply","this","arguments","_callee","searchParams","responseData","cityName","countryName","apiUrl","regenerator_default","a","wrap","_context","prev","next","console","log","axios","get","then","response","data","catch","error","t0","abrupt","stop","form","props","_useState","useState","_useState2","Object","slicedToArray","setCityName","react_default","createElement","Fragment","className","id","onChange","event","target","value","type","name","placeholder","onClick","formData","document","getElementById","concat","withStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","classes","Card_default","CardContent_default","Typography_default","color","gutterBottom","variant","component","humidity","temperature","pressure","CardActions_default","Header","Footer","WeatherImage","require","App","state","weatherData","completeCityList","hasError","fetchResponseData","sent","_this","setState","countryCode","map","singleObject","country","objectSpread","autocomplete","cityList","jquery","getJSON","push","inp","arr","currentFocus","addActive","x","i","length","classList","remove","removeActive","add","closeAllLists","elmnt","getElementsByClassName","parentNode","removeChild","addEventListener","e","b","val","setAttribute","appendChild","substr","toUpperCase","innerHTML","getElementsByTagName","dispatchEvent","Event","keyCode","preventDefault","click","Autocomplete","recentSearchesData","JSON","parse","localStorage","getItem","toConsumableArray","unshift","setItem","stringify","Header_Header_Header","Form_Form","weather","SimpleCard_SimpleCard","main","temp","src","alt","Header_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c704507.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weather.3d872e4e.gif\";","// http://api.openweathermap.org rest api\r\nexport const APP_ID = '09fc2fbe71c94cb399114e42d35996f1';\r\n","import axios from 'axios';\r\nimport {APP_ID} from '../constants/Credentials';\r\n\r\nexport  default async function WeatherDataByCityCountryService(searchParams){\r\n    let responseData = null;\r\n    console.log(searchParams)\r\n    let cityName = searchParams.cityName;\r\n    let countryName = searchParams.countryName;\r\n    let apiUrl = 'http://api.openweathermap.org/data/2.5/weather?q='+cityName+','+countryName+'&appid='+APP_ID;\r\n    try{\r\n        await axios.get(apiUrl)\r\n        .then((response) => {\r\n            responseData = response.data;\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        })\r\n    }catch(error){\r\n        console.log('Error in WeatherDataByCityCountryService = '+error);\r\n    }\r\n    return responseData;\r\n} ","import React, { useState } from 'react';\r\nimport './Form.css';\r\n\r\nfunction form(props){\r\n    const [cityName, setCityName] = useState('');\r\n    const search = () => {\r\n        console.log(\" search \", cityName)\r\n        props.formData(document.getElementById(\"cityName\").value);\r\n        document.getElementById(\"cityName\").value = \"\";\r\n        setCityName(\"\");\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"autocomplete form-main\">\r\n                <input id=\"cityName\" onChange={event => setCityName(event.target.value)} type=\"text\" name=\"myCity\" placeholder=\"City\" />\r\n                <button onClick={search} id=\"button-check\" className={`button-check ${cityName === \"\" ? \"button-disabled\": \"button-active\"}`}>Check Weather</button>            \r\n            </div>\r\n        </React.Fragment>\r\n\r\n)}\r\n\r\nexport default form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n};\r\n\r\nfunction SimpleCard(props) {\r\n  const { classes } = props;\r\n  const bull = <span className={classes.bullet}>•</span>;\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          Data\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {props.cityName}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          Humidity: {props.humidity}\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          Temperature: {props.temperature}\r\n        </Typography>\r\n        <Typography component=\"p\">\r\n          Pressure: {props.pressure}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        {/* <Button size=\"small\">Learn More</Button> */}\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nSimpleCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SimpleCard);","import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nexport const Header = () => (\r\n    <div className=\"header\">\r\n        <h1>Weather Information App</h1>\r\n    </div>\r\n);\r\n\r\nexport const Footer = () => (\r\n    <div className=\"footer\">\r\n        <p>powered by api.openweathermap.org</p>\r\n        <p>No Copyright</p>\r\n        <p>developed in react</p>\r\n    </div>\r\n);\r\n\r\n","import React, { Component } from 'react';\r\nimport jquery from 'jquery';\r\n\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport WeatherDataByCityId from '../../services/WeatherDataByCityIdService';\r\nimport WeatherDataByCityCountryService from '../../services/WeatherDataByCityCountryService';\r\nimport UserForm from '../../components/UserForm/UserForm';\r\nimport Form from '../../UI/Autocomplete/Form/Form';\r\nimport Autocomplete from '../../UI/Autocomplete/Autocomplete';\r\nimport cityListJson from '../../data/city.list.json';\r\nimport SimpleCard from '../../components/SimpleCard/SimpleCard';\r\nimport { Header, Footer } from '../../components/Header/Header';\r\nconst WeatherImage = require(\"../../assets/weather.gif\");\r\n\r\nclass App extends Component {\r\n  state = {\r\n    weatherData: null,\r\n    completeCityList: [],\r\n    hasError: false,\r\n    cityName: ''\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.autocomplete();\r\n  }\r\n\r\n  fetchResponseData = async (searchParams) => {\r\n    let weatherData = await WeatherDataByCityCountryService(searchParams);\r\n    if(weatherData !== null){\r\n      this.setState({weatherData, hasError: false});\r\n    }else\r\n      this.setState({hasError: true});\r\n  }\r\n \r\n  formData = cityName => {\r\n    console.log(\" cityName \", cityName)\r\n    let countryCode = '';\r\n    this.state.completeCityList.map(singleObject => {\r\n      if(cityName === singleObject.name){\r\n        countryCode = singleObject.country;\r\n      }\r\n    })\r\n    let searchParams = {...this.state.searchParams};\r\n    searchParams.cityName = cityName;\r\n    searchParams.countryCode = countryCode;\r\n    this.setState({cityName});\r\n    // console.log(\"cityName = \"+cityName+\", countryCode = \"+countryCode);        \r\n    if(countryCode !== '')\r\n      this.fetchResponseData(searchParams);    \r\n  }\r\n\r\n  autocomplete = () => {\r\n      /*An array containing all the country names in the world:*/\r\n//    let countries = [\"Afghanistan\",\"Albania\",\"Algeria\",\"Andorra\",\"Angola\",\"Anguilla\",\"Antigua & Barbuda\",\"Argentina\",\"Armenia\",\"Aruba\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\",\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bermuda\",\"Bhutan\",\"Bolivia\",\"Bosnia & Herzegovina\",\"Botswana\",\"Brazil\",\"British Virgin Islands\",\"Brunei\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Cape Verde\",\"Cayman Islands\",\"Central Arfrican Republic\",\"Chad\",\"Chile\",\"China\",\"Colombia\",\"Congo\",\"Cook Islands\",\"Costa Rica\",\"Cote D Ivoire\",\"Croatia\",\"Cuba\",\"Curacao\",\"Cyprus\",\"Czech Republic\",\"Denmark\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\",\"Eritrea\",\"Estonia\",\"Ethiopia\",\"Falkland Islands\",\"Faroe Islands\",\"Fiji\",\"Finland\",\"France\",\"French Polynesia\",\"French West Indies\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Gibraltar\",\"Greece\",\"Greenland\",\"Grenada\",\"Guam\",\"Guatemala\",\"Guernsey\",\"Guinea\",\"Guinea Bissau\",\"Guyana\",\"Haiti\",\"Honduras\",\"Hong Kong\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"Iran\",\"Iraq\",\"Ireland\",\"Isle of Man\",\"Israel\",\"Italy\",\"Jamaica\",\"Japan\",\"Jersey\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kiribati\",\"Kosovo\",\"Kuwait\",\"Kyrgyzstan\",\"Laos\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Macau\",\"Macedonia\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Marshall Islands\",\"Mauritania\",\"Mauritius\",\"Mexico\",\"Micronesia\",\"Moldova\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Montserrat\",\"Morocco\",\"Mozambique\",\"Myanmar\",\"Namibia\",\"Nauro\",\"Nepal\",\"Netherlands\",\"Netherlands Antilles\",\"New Caledonia\",\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"North Korea\",\"Norway\",\"Oman\",\"Pakistan\",\"Palau\",\"Palestine\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Poland\",\"Portugal\",\"Puerto Rico\",\"Qatar\",\"Reunion\",\"Romania\",\"Russia\",\"Rwanda\",\"Saint Pierre & Miquelon\",\"Samoa\",\"San Marino\",\"Sao Tome and Principe\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\",\"Sierra Leone\",\"Singapore\",\"Slovakia\",\"Slovenia\",\"Solomon Islands\",\"Somalia\",\"South Africa\",\"South Korea\",\"South Sudan\",\"Spain\",\"Sri Lanka\",\"St Kitts & Nevis\",\"St Lucia\",\"St Vincent\",\"Sudan\",\"Suriname\",\"Swaziland\",\"Sweden\",\"Switzerland\",\"Syria\",\"Taiwan\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Timor L'Este\",\"Togo\",\"Tonga\",\"Trinidad & Tobago\",\"Tunisia\",\"Turkey\",\"Turkmenistan\",\"Turks & Caicos\",\"Tuvalu\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"United Kingdom\",\"United States of America\",\"Uruguay\",\"Uzbekistan\",\"Vanuatu\",\"Vatican City\",\"Venezuela\",\"Vietnam\",\"Virgin Islands (US)\",\"Yemen\",\"Zambia\",\"Zimbabwe\"];\r\n    /*initiate the autocomplete function on the \"myInput\" element, and pass along the countries array as possible autocomplete values:*/\r\n    let cityList = [];\r\n    jquery.getJSON('city.list.json', (response) => {\r\n      response.map(singleObject => {\r\n        cityList.push(singleObject.name);\r\n      })\r\n      this.setState({completeCityList: response});\r\n    });\r\n    Autocomplete(document.getElementById(\"cityName\"), cityList);\r\n  }\r\n\r\nrender() {\r\n    // let weatherData = this.state.weatherData;\r\n    // if(weatherData.city !== undefined)\r\n    //   console.log(weatherData.city)\r\n    // data = weatherData;\r\n    let recentSearchesData = [];\r\n    if(JSON.parse(localStorage.getItem(\"weatherData\")))\r\n      recentSearchesData = [ ...JSON.parse(localStorage.getItem(\"weatherData\"))];        \r\n\r\n    if(this.state.weatherData !== null){\r\n      recentSearchesData.unshift(this.state.weatherData);      \r\n      localStorage.setItem(\"weatherData\", JSON.stringify(recentSearchesData));\r\n    } \r\n      \r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <div className=\"app-main\">\r\n        <p className=\"app-weather-info-heading\">Search your city weather information</p>\r\n        <Form formData={this.formData} />  \r\n        {\r\n          this.state.hasError ? \r\n          <h1>For Cityname: {this.state.cityName} is not in records. Please select a valid cityname from dropdown list.</h1>:\r\n          recentSearchesData.length > 0 ?\r\n          <React.Fragment>\r\n          <h2 className=\"recent-heading\">Recent Searches</h2>\r\n          <div className=\"recent-searches\">\r\n          {recentSearchesData.map(weather => (\r\n              <SimpleCard \r\n                cityName={weather.name}\r\n                humidity={weather.main.humidity}\r\n                pressure={weather.main.pressure}\r\n                temperature={weather.main.temp}\r\n              />\r\n            ))\r\n          } \r\n          </div>\r\n          </React.Fragment>: <img src={WeatherImage} alt=\"\"/>\r\n        }      \r\n        </div>\r\n        <Footer />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n//        <UserForm userFormData={this.userFormData}/>\r\n","import './Autocomplete.css';\r\n\r\nexport default function autocomplete(inp, arr) {\r\n    /*the autocomplete function takes two arguments,\r\n    the text field element and an array of possible autocompleted values:*/\r\n    var currentFocus;\r\n    /*execute a function when someone writes in the text field:*/\r\n    inp.addEventListener(\"input\", function(e) {\r\n        var a, b, i, val = this.value;\r\n        /*close any already open lists of autocompleted values*/\r\n        closeAllLists();\r\n        if (!val) { return false;}\r\n        currentFocus = -1;\r\n        /*create a DIV element that will contain the items (values):*/\r\n        a = document.createElement(\"DIV\");\r\n        a.setAttribute(\"id\", this.id + \"autocomplete-list\");\r\n        a.setAttribute(\"class\", \"autocomplete-items\");\r\n        /*append the DIV element as a child of the autocomplete container:*/\r\n        this.parentNode.appendChild(a);\r\n        /*for each item in the array...*/\r\n        for (i = 0; i < arr.length; i++) {\r\n          /*check if the item starts with the same letters as the text field value:*/\r\n          if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\r\n            /*create a DIV element for each matching element:*/\r\n            b = document.createElement(\"DIV\");\r\n            /*make the matching letters bold:*/\r\n            b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\r\n            b.innerHTML += arr[i].substr(val.length);\r\n            /*insert a input field that will hold the current array item's value:*/\r\n            b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\r\n            /*execute a function when someone clicks on the item value (DIV element):*/\r\n            b.addEventListener(\"click\", function(e) {\r\n                /*insert the value for the autocomplete text field:*/\r\n                inp.value = this.getElementsByTagName(\"input\")[0].value;\r\n                document.getElementById(\"cityName\").dispatchEvent(new Event('change'));\r\n                /*close the list of autocompleted values,\r\n                (or any other open lists of autocompleted values:*/\r\n                closeAllLists();\r\n            });\r\n            a.appendChild(b);\r\n          }\r\n        }\r\n    });\r\n    /*execute a function presses a key on the keyboard:*/\r\n    inp.addEventListener(\"keydown\", function(e) {\r\n        var x = document.getElementById(this.id + \"autocomplete-list\");\r\n        if (x) x = x.getElementsByTagName(\"div\");\r\n        if (e.keyCode == 40) {\r\n          /*If the arrow DOWN key is pressed,\r\n          increase the currentFocus variable:*/\r\n          currentFocus++;\r\n          /*and and make the current item more visible:*/\r\n          addActive(x);\r\n        } else if (e.keyCode == 38) { //up\r\n          /*If the arrow UP key is pressed,\r\n          decrease the currentFocus variable:*/\r\n          currentFocus--;\r\n          /*and and make the current item more visible:*/\r\n          addActive(x);\r\n        } else if (e.keyCode == 13) {\r\n          /*If the ENTER key is pressed, prevent the form from being submitted,*/\r\n          e.preventDefault();\r\n          if (currentFocus > -1) {\r\n            /*and simulate a click on the \"active\" item:*/\r\n            if (x) x[currentFocus].click();\r\n          }\r\n        }\r\n    });\r\n    function addActive(x) {\r\n      /*a function to classify an item as \"active\":*/\r\n      if (!x) return false;\r\n      /*start by removing the \"active\" class on all items:*/\r\n      removeActive(x);\r\n      if (currentFocus >= x.length) currentFocus = 0;\r\n      if (currentFocus < 0) currentFocus = (x.length - 1);\r\n      /*add class \"autocomplete-active\":*/\r\n      x[currentFocus].classList.add(\"autocomplete-active\");\r\n    }\r\n    function removeActive(x) {\r\n      /*a function to remove the \"active\" class from all autocomplete items:*/\r\n      for (var i = 0; i < x.length; i++) {\r\n        x[i].classList.remove(\"autocomplete-active\");\r\n      }\r\n    }\r\n    function closeAllLists(elmnt) {\r\n      /*close all autocomplete lists in the document,\r\n      except the one passed as an argument:*/\r\n      var x = document.getElementsByClassName(\"autocomplete-items\");\r\n      for (var i = 0; i < x.length; i++) {\r\n        if (elmnt != x[i] && elmnt != inp) {\r\n          x[i].parentNode.removeChild(x[i]);\r\n        }\r\n      }\r\n    }\r\n    /*execute a function when someone clicks in the document:*/\r\n    document.addEventListener(\"click\", function (e) {\r\n        closeAllLists(e.target);\r\n    });\r\n  }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './containers/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}