{"version":3,"sources":["constants/Credentials.js","services/WeatherDataByCityCountryService.js","UI/Autocomplete/Form/Form.js","components/SimpleCard/SimpleCard.js","containers/App/App.js","UI/Autocomplete/Autocomplete.js","serviceWorker.js","index.js"],"names":["APP_ID","WeatherDataByCityCountryService","_x","_WeatherDataByCityCountryService","apply","this","arguments","_callee","searchParams","responseData","cityName","countryName","apiUrl","regenerator_default","a","wrap","_context","prev","next","console","log","axios","get","then","response","data","catch","error","t0","abrupt","stop","form","props","react_default","createElement","Fragment","className","style","paddingTop","id","type","name","placeholder","onClick","formData","withStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","classes","Card_default","CardContent_default","Typography_default","color","gutterBottom","variant","component","humidity","temperature","pressure","CardActions_default","Button_default","size","App","state","weatherData","completeCityList","hasError","fetchResponseData","sent","_this","setState","document","getElementById","value","countryCode","map","singleObject","country","Object","objectSpread","autocomplete","cityList","jquery","getJSON","push","inp","arr","currentFocus","addActive","x","i","length","classList","remove","removeActive","add","closeAllLists","elmnt","getElementsByClassName","parentNode","removeChild","addEventListener","e","b","val","setAttribute","appendChild","substr","toUpperCase","innerHTML","getElementsByTagName","keyCode","preventDefault","click","target","Autocomplete","main","temp","Form","SimpleCard_SimpleCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f9eeaee.chunk.js","sourcesContent":["// http://api.openweathermap.org rest api\nexport const APP_ID = '09fc2fbe71c94cb399114e42d35996f1';\n","import axios from 'axios';\nimport {APP_ID} from '../constants/Credentials';\n\nexport  default async function WeatherDataByCityCountryService(searchParams){\n    let responseData = null;\n    console.log(searchParams)\n    let cityName = searchParams.cityName;\n    let countryName = searchParams.countryName;\n    let apiUrl = 'http://api.openweathermap.org/data/2.5/weather?q='+cityName+','+countryName+'&appid='+APP_ID;\n    try{\n        await axios.get(apiUrl)\n        .then((response) => {\n            responseData = response.data;\n        })\n        .catch((error) => {\n            console.log(error);\n        })\n    }catch(error){\n        console.log('Error in WeatherDataByCityCountryService = '+error);\n    }\n    return responseData;\n} ","import React from 'react';\n\nconst form = (props) => {\n    return(\n        <React.Fragment>\n            <div className=\"autocomplete\" style={{\"paddingTop\":\"20px\"}}>\n            <input id=\"cityName\" type=\"text\" name=\"myCity\" placeholder=\"City\" />\n            </div><br />\n            <div style={{\"paddingTop\":\"20px\"}}>\n                <button onClick={() => props.formData()} >Check Weather</button>            \n            </div>\n        </React.Fragment>\n\n)}\n\nexport default form;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n};\n\nfunction SimpleCard(props) {\n  const { classes } = props;\n  const bull = <span className={classes.bullet}>â€¢</span>;\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Data\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {props.cityName}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          Humidity: {props.humidity}\n        </Typography>\n        <Typography component=\"p\">\n          Temperature: {props.temperature}\n        </Typography>\n        <Typography component=\"p\">\n          Pressure: {props.pressure}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nSimpleCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleCard);","import React, { Component } from 'react';\nimport jquery from 'jquery';\n\n// import logo from './logo.svg';\n// import './App.css';\nimport WeatherDataByCityId from '../../services/WeatherDataByCityIdService';\nimport WeatherDataByCityCountryService from '../../services/WeatherDataByCityCountryService';\nimport UserForm from '../../components/UserForm/UserForm';\nimport Form from '../../UI/Autocomplete/Form/Form';\nimport Autocomplete from '../../UI/Autocomplete/Autocomplete';\nimport cityListJson from '../../data/city.list.json';\nimport SimpleCard from '../../components/SimpleCard/SimpleCard';\n\nclass App extends Component {\n  state = {\n    weatherData: null,\n    completeCityList: [],\n    hasError: false,\n    cityName: ''\n  }\n\n  componentDidMount(){\n    this.autocomplete();\n  }\n\n  fetchResponseData = async (searchParams) => {\n    let weatherData = await WeatherDataByCityCountryService(searchParams);\n    if(weatherData !== null){\n      this.setState({weatherData, hasError: false});\n    }else\n      this.setState({hasError: true});\n  }\n \n  formData = () => {\n    let cityName = document.getElementById(\"cityName\").value;\n    let countryCode = '';\n    this.state.completeCityList.map(singleObject => {\n      if(cityName === singleObject.name){\n        countryCode = singleObject.country;\n      }\n    })\n    let searchParams = {...this.state.searchParams};\n    searchParams.cityName = cityName;\n    searchParams.countryCode = countryCode;\n    this.setState({cityName: cityName});\n    // console.log(\"cityName = \"+cityName+\", countryCode = \"+countryCode);        \n    if(countryCode !== '')\n      this.fetchResponseData(searchParams);    \n  }\n\n  autocomplete = () => {\n      /*An array containing all the country names in the world:*/\n//    let countries = [\"Afghanistan\",\"Albania\",\"Algeria\",\"Andorra\",\"Angola\",\"Anguilla\",\"Antigua & Barbuda\",\"Argentina\",\"Armenia\",\"Aruba\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\",\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bermuda\",\"Bhutan\",\"Bolivia\",\"Bosnia & Herzegovina\",\"Botswana\",\"Brazil\",\"British Virgin Islands\",\"Brunei\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Cape Verde\",\"Cayman Islands\",\"Central Arfrican Republic\",\"Chad\",\"Chile\",\"China\",\"Colombia\",\"Congo\",\"Cook Islands\",\"Costa Rica\",\"Cote D Ivoire\",\"Croatia\",\"Cuba\",\"Curacao\",\"Cyprus\",\"Czech Republic\",\"Denmark\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\",\"Eritrea\",\"Estonia\",\"Ethiopia\",\"Falkland Islands\",\"Faroe Islands\",\"Fiji\",\"Finland\",\"France\",\"French Polynesia\",\"French West Indies\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Gibraltar\",\"Greece\",\"Greenland\",\"Grenada\",\"Guam\",\"Guatemala\",\"Guernsey\",\"Guinea\",\"Guinea Bissau\",\"Guyana\",\"Haiti\",\"Honduras\",\"Hong Kong\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"Iran\",\"Iraq\",\"Ireland\",\"Isle of Man\",\"Israel\",\"Italy\",\"Jamaica\",\"Japan\",\"Jersey\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kiribati\",\"Kosovo\",\"Kuwait\",\"Kyrgyzstan\",\"Laos\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Macau\",\"Macedonia\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Marshall Islands\",\"Mauritania\",\"Mauritius\",\"Mexico\",\"Micronesia\",\"Moldova\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Montserrat\",\"Morocco\",\"Mozambique\",\"Myanmar\",\"Namibia\",\"Nauro\",\"Nepal\",\"Netherlands\",\"Netherlands Antilles\",\"New Caledonia\",\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"North Korea\",\"Norway\",\"Oman\",\"Pakistan\",\"Palau\",\"Palestine\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Poland\",\"Portugal\",\"Puerto Rico\",\"Qatar\",\"Reunion\",\"Romania\",\"Russia\",\"Rwanda\",\"Saint Pierre & Miquelon\",\"Samoa\",\"San Marino\",\"Sao Tome and Principe\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\",\"Sierra Leone\",\"Singapore\",\"Slovakia\",\"Slovenia\",\"Solomon Islands\",\"Somalia\",\"South Africa\",\"South Korea\",\"South Sudan\",\"Spain\",\"Sri Lanka\",\"St Kitts & Nevis\",\"St Lucia\",\"St Vincent\",\"Sudan\",\"Suriname\",\"Swaziland\",\"Sweden\",\"Switzerland\",\"Syria\",\"Taiwan\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Timor L'Este\",\"Togo\",\"Tonga\",\"Trinidad & Tobago\",\"Tunisia\",\"Turkey\",\"Turkmenistan\",\"Turks & Caicos\",\"Tuvalu\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"United Kingdom\",\"United States of America\",\"Uruguay\",\"Uzbekistan\",\"Vanuatu\",\"Vatican City\",\"Venezuela\",\"Vietnam\",\"Virgin Islands (US)\",\"Yemen\",\"Zambia\",\"Zimbabwe\"];\n    /*initiate the autocomplete function on the \"myInput\" element, and pass along the countries array as possible autocomplete values:*/\n    let cityList = [];\n    jquery.getJSON('city.list.json', (response) => {\n      response.map(singleObject => {\n        cityList.push(singleObject.name);\n      })\n      this.setState({completeCityList: response});\n    });\n    console.log(cityList)\n    Autocomplete(document.getElementById(\"cityName\"), cityList);\n  }\n\nrender() {\n    // let weatherData = this.state.weatherData;\n    // if(weatherData.city !== undefined)\n    //   console.log(weatherData.city)\n    // data = weatherData;\n    let weatherData = this.state.weatherData;\n    let humidity = '', pressure = '', temperature = '';\n    if(weatherData !== null){\n      humidity = weatherData.main.humidity;\n      pressure = weatherData.main.pressure;\n      temperature = weatherData.main.temp;\n    }\n    return (\n      <React.Fragment>\n       <Form formData={this.formData} />  \n       {\n         this.state.hasError ? \n         <h1>For Cityname: {this.state.cityName} is not in records. Please select a valid cityname from dropdown list.</h1>:\n         weatherData !== null ? \n         <SimpleCard \n          cityName={this.state.cityName}\n          humidity={humidity}\n          pressure={pressure}\n          temperature={temperature}\n         />: <div><h1>Feed data to get weather information</h1></div>\n       }      \n      </React.Fragment>\n    );\n  }\n\n}\n\nexport default App;\n//        <UserForm userFormData={this.userFormData}/>\n","import './Autocomplete.css';\n\nexport default function autocomplete(inp, arr) {\n    /*the autocomplete function takes two arguments,\n    the text field element and an array of possible autocompleted values:*/\n    var currentFocus;\n    /*execute a function when someone writes in the text field:*/\n    inp.addEventListener(\"input\", function(e) {\n        var a, b, i, val = this.value;\n        /*close any already open lists of autocompleted values*/\n        closeAllLists();\n        if (!val) { return false;}\n        currentFocus = -1;\n        /*create a DIV element that will contain the items (values):*/\n        a = document.createElement(\"DIV\");\n        a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n        a.setAttribute(\"class\", \"autocomplete-items\");\n        /*append the DIV element as a child of the autocomplete container:*/\n        this.parentNode.appendChild(a);\n        /*for each item in the array...*/\n        for (i = 0; i < arr.length; i++) {\n          /*check if the item starts with the same letters as the text field value:*/\n          if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n            /*create a DIV element for each matching element:*/\n            b = document.createElement(\"DIV\");\n            /*make the matching letters bold:*/\n            b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n            b.innerHTML += arr[i].substr(val.length);\n            /*insert a input field that will hold the current array item's value:*/\n            b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n            /*execute a function when someone clicks on the item value (DIV element):*/\n            b.addEventListener(\"click\", function(e) {\n                /*insert the value for the autocomplete text field:*/\n                inp.value = this.getElementsByTagName(\"input\")[0].value;\n                /*close the list of autocompleted values,\n                (or any other open lists of autocompleted values:*/\n                closeAllLists();\n            });\n            a.appendChild(b);\n          }\n        }\n    });\n    /*execute a function presses a key on the keyboard:*/\n    inp.addEventListener(\"keydown\", function(e) {\n        var x = document.getElementById(this.id + \"autocomplete-list\");\n        if (x) x = x.getElementsByTagName(\"div\");\n        if (e.keyCode == 40) {\n          /*If the arrow DOWN key is pressed,\n          increase the currentFocus variable:*/\n          currentFocus++;\n          /*and and make the current item more visible:*/\n          addActive(x);\n        } else if (e.keyCode == 38) { //up\n          /*If the arrow UP key is pressed,\n          decrease the currentFocus variable:*/\n          currentFocus--;\n          /*and and make the current item more visible:*/\n          addActive(x);\n        } else if (e.keyCode == 13) {\n          /*If the ENTER key is pressed, prevent the form from being submitted,*/\n          e.preventDefault();\n          if (currentFocus > -1) {\n            /*and simulate a click on the \"active\" item:*/\n            if (x) x[currentFocus].click();\n          }\n        }\n    });\n    function addActive(x) {\n      /*a function to classify an item as \"active\":*/\n      if (!x) return false;\n      /*start by removing the \"active\" class on all items:*/\n      removeActive(x);\n      if (currentFocus >= x.length) currentFocus = 0;\n      if (currentFocus < 0) currentFocus = (x.length - 1);\n      /*add class \"autocomplete-active\":*/\n      x[currentFocus].classList.add(\"autocomplete-active\");\n    }\n    function removeActive(x) {\n      /*a function to remove the \"active\" class from all autocomplete items:*/\n      for (var i = 0; i < x.length; i++) {\n        x[i].classList.remove(\"autocomplete-active\");\n      }\n    }\n    function closeAllLists(elmnt) {\n      /*close all autocomplete lists in the document,\n      except the one passed as an argument:*/\n      var x = document.getElementsByClassName(\"autocomplete-items\");\n      for (var i = 0; i < x.length; i++) {\n        if (elmnt != x[i] && elmnt != inp) {\n          x[i].parentNode.removeChild(x[i]);\n        }\n      }\n    }\n    /*execute a function when someone clicks in the document:*/\n    document.addEventListener(\"click\", function (e) {\n        closeAllLists(e.target);\n    });\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}